#!/bin/bash

: '
v.0.01
Package Manager Wrapper Script

ShortDesc: A script to wrap package manager commands (pacman, dnf, apt) with optional proxy support, universal install/remove/update commands, and SSL certificate handling.

Description:
This script wraps common Linux package managers (pacman, dnf, apt) with proxy support, SSL certificate handling, and universal commands for installing, removing, and updating packages, irrespective of the package manager.

Parameters:
--install <packages>: Install specified comma-separated packages
--remove <packages>: Remove specified comma-separated packages
--system-update: Update all system packages
--timeout <seconds>: Set the timeout for commands (default is 600 seconds)
--custom-flags <flags>: Custom flags to be passed to the package manager (e.g., --needed for pacman)
--auto-confirm: automatically answer "yes" to all answers (no confirmation)
--use-aur: Arch distribution only, use AUR helper (yay, paru) instead of pacman 
Environment Variables:
- USE_PROXY: Set to true to enable proxy usage, false to disable it.
- HTTPS_PROXY: The proxy URL to use.
- CERT_BASE64_STRING: Base64-encoded SSL certificate string for verifying proxy connections (optional).

Returns:
- 0: Success (including re-download for pacman)
- 1: Failure (for package installation errors or unsupported distribution)

Example Usage:
./package-mgr --install vim,git --timeout 900 --custom-flags "--needed"
'

fc_log_info() {
    echo -e "\033[0;32m[INFO]\033[0m $1" >&2
}

fc_log_info2() {
    echo -e "\033[0;36m[INFO]\033[0m $1" >&2
}
fc_log_error() {
    echo -e "\033[0;31m[ERROR]\033[0m $1" >&2
}

# Default timeout
DOWNLOAD_TIMEOUT_SECONDS=600
CUSTOM_FLAGS=""
AUTO_CONFIRM="false"
USE_AUR="false"

# Parse arguments
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        --install) action="install"; packages="$2"; shift ;;
        --remove) action="remove"; packages="$2"; shift ;;
        --system-update) action="update" ;;
        --timeout) DOWNLOAD_TIMEOUT_SECONDS="$2"; shift ;;
	--auto-confirm) AUTO_CONFIRM="true" ;;
        --custom-flags) CUSTOM_FLAGS="$2"; shift ;;
	--use-aur) USE_AUR="true" ;;
        *) fc_log_error "Unknown parameter: $1"; exit 1 ;;
    esac
    shift
done

if [ "$USE_AUR" == "true" ]; then
   if root; then
       fc_log_error "when using --use-aur, you must NOT run this script as root or sudo!, ONLY normal user privilege is allowed"
       exit 1
   else
      fc_log_error "needs sudo"
      exit 1
else 
fi

# Proxy and SSL certificate setup
function setup_proxy_and_cert() {
    if [[ "$USE_PROXY" == "true" ]]; then
        fc_log_info "Proxy usage is enabled, configuring package manager to use proxy."

        if [[ -n "$CERT_BASE64_STRING" ]]; then
            TEMP_CERT_FILE=$(mktemp)
            echo "$CERT_BASE64_STRING" | base64 -d > "$TEMP_CERT_FILE"
            fc_log_info2 "Proxy SSL cert usage is enabled."
        fi
    fi
}

# Return code normalization function
function normalize_return_code() {
    local return_code=$1
    local manager=$2

    # For all package managers, treat a "nothing to do" or "already up to date" as success (0)
    # Otherwise, return 1 only for errors that would prevent installation or updates.
    case "$manager" in
        apt|dnf)
            [[ $return_code -eq 0 ]] && return 0 || return 1 ;;
        pacman)
            [[ $return_code -eq 0 ]] && return 0 || return 1 ;;
        *)
            fc_log_error "Unsupported package manager."
            return 1 ;;
    esac
}

# Wrapper for pacman 
function _pacman_wrapper {
    local config_file=$(mktemp)
    cp /etc/pacman.conf "$config_file" || { fc_log_error "Failed to copy pacman.conf"; return 1; }

    if [[ "$USE_PROXY" == "true" ]]; then
        local proxy_command="XferCommand = /usr/bin/curl --proxy \"$HTTPS_PROXY\" -fC - --retry 3 --retry-delay 3 --connect-timeout $DOWNLOAD_TIMEOUT_SECONDS -o %o %u"
        [[ -n "$CERT_BASE64_STRING" ]] && proxy_command="XferCommand = /usr/bin/curl --proxy \"$HTTPS_PROXY\" --cacert \"$TEMP_CERT_FILE\" -fC - --retry 3 --retry-delay 3 --connect-timeout $DOWNLOAD_TIMEOUT_SECONDS -o %o %u"
        sed -i "/^\[options\]/a $proxy_command" "$config_file"
    fi

    if [ "$AUTO_CONFIRM" == "true" ]; then
        CONFIRM="--noconfirm"
    else
        CONFIRM=""
    fi
    
    # Use AUR helper if available, if a package can be accessed from both (official and Aur)
    # prefer official over AUR repo (this is done using --noaur option)
    EXECUTABLE=pacman
    if [ "$USE_AUR" == "true" ]; then
	if command -v yay &> /dev/null; then
        	EXECUTABLE=yay
    	elif command -v paru &> /dev/null; then
        	EXECUTABLE=paru
	else
		fc_error_log "you configured to use 'AUR helper' but havent installed any AUR helper...bailing out"
		exit 1
	fi
    else
        # Fallback to plain pacman for official repo packages
        case "$action" in
            install) $USE_AUR --config "$config_file" -Sy $CONFIRM ${packages//,/ } ;;
            remove) $USE_AUR --config "$config_file" -R $CONFIRM ${packages//,/ } ;;
            update) $USE_AUR --config "$config_file" -Syu $CONFIRM ;;
        esac
    fi

    normalize_return_code $? "pacman"
}

# Wrapper for pacman with proxy and cert support
function _original_pacman_wrapper {
    local config_file=$(mktemp)
    cp /etc/pacman.conf "$config_file" || { fc_log_error "Failed to copy pacman.conf"; return 1; }

    if [[ "$USE_PROXY" == "true" ]]; then
        local proxy_command="XferCommand = /usr/bin/curl --proxy \"$HTTPS_PROXY\" -fC - --retry 3 --retry-delay 3 --connect-timeout $DOWNLOAD_TIMEOUT_SECONDS -o %o %u"
        [[ -n "$CERT_BASE64_STRING" ]] && proxy_command="XferCommand = /usr/bin/curl --proxy \"$HTTPS_PROXY\" --cacert \"$TEMP_CERT_FILE\" -fC - --retry 3 --retry-delay 3 --connect-timeout $DOWNLOAD_TIMEOUT_SECONDS -o %o %u"
        sed -i "/^\[options\]/a $proxy_command" "$config_file"
    fi

    if [ "$AUTO_CONFIRM" == "true" ]; then
        CONFIRM="--noconfirm"
    else
        CONFIRM=""
    fi

    case "$action" in
        install) pacman --config "$config_file" -Sy $CONFIRM $CUSTOM_FLAGS ${packages//,/ } ;;
        remove) pacman --config "$config_file" -R $CONFIRM ${packages//,/ } ;;
        update) pacman --config "$config_file" -Syu $CONFIRM $CUSTOM_FLAGS ;;
    esac
    normalize_return_code $? "pacman"
}

# Wrapper for dnf with proxy and cert support
function _dnf_wrapper {
    local config_file=$(mktemp)
    cp /etc/dnf/dnf.conf "$config_file" || { fc_log_error "Failed to copy dnf.conf"; return 1; }

    if [[ "$USE_PROXY" == "true" ]]; then
        local proxy_addon="proxy=$HTTPS_PROXY\ntimeout=$DOWNLOAD_TIMEOUT_SECONDS"
        [[ -n "$CERT_BASE64_STRING" ]] && proxy_addon="$proxy_addon\nsslverify=1\nsslcacert=$TEMP_CERT_FILE"
        echo -e "$proxy_addon" >> "$config_file"
    fi

    if [ "$AUTO_CONFIRM" == "true" ]; then
        CONFIRM="-y"
    else
        CONFIRM=""
    fi

    case "$action" in
        install) dnf -c "$config_file" install $CONFIRM $CUSTOM_FLAGS ${packages//,/ } ;;
        remove) dnf -c "$config_file" remove $CONFIRM ${packages//,/ } ;;
        update) dnf -c "$config_file" upgrade $CONFIRM $CUSTOM_FLAGS ;;
    esac
    normalize_return_code $? "dnf"
}

# Wrapper for apt with proxy and cert support
function _apt_wrapper {
    local config_file=$(mktemp)
    cp /etc/apt/apt.conf "$config_file" || { fc_log_error "Failed to copy apt.conf"; return 1; }

    if [[ "$USE_PROXY" == "true" ]]; then
        local proxy_addon="Acquire::https::proxy \"$HTTPS_PROXY\";\nAcquire::http::Timeout \"$DOWNLOAD_TIMEOUT_SECONDS\";\nAcquire::https::Timeout \"$DOWNLOAD_TIMEOUT_SECONDS\";"
        [[ -n "$CERT_BASE64_STRING" ]] && proxy_addon="$proxy_addon\nAcquire::https::Verify-Peer \"true\";\nAcquire::https::CaInfo \"$TEMP_CERT_FILE\";"
        echo -e "$proxy_addon" >> "$config_file"
    fi

    if [ "$AUTO_CONFIRM" == "true" ]; then
        CONFIRM="-y"
    else
        CONFIRM=""
    fi

    case "$action" in
        install) apt -c "$config_file" install $CONFIRM $CUSTOM_FLAGS ${packages//,/ } ;;
        remove) apt -c "$config_file" remove $CONFIRM ${packages//,/ } ;;
        update) apt -c "$config_file" update $CONFIRM && apt -c "$config_file" upgrade $CONFIRM $CUSTOM_FLAGS ;;
    esac
    normalize_return_code $? "apt"
}

function main {
    # Ensure script is run as root
    if [[ $EUID -ne 0 ]]; then
        fc_log_error "script needs to be run as root"
        exit 1
    fi

    # Set up proxy and SSL cert if enabled
    setup_proxy_and_cert

    return_code=-1
    # Detect and use appropriate package manager
    if command -v dnf &> /dev/null; then
        _dnf_wrapper
        return_code=$?
    elif command -v pacman &> /dev/null; then
        _pacman_wrapper
        return_code=$?
    elif command -v apt &> /dev/null; then
        _apt_wrapper
        return_code=$?
    else
        fc_log_error "Unsupported distribution. No recognized package manager found."
        return_code=2
    fi

    # Cleanup temporary cert file if created
    [[ -n "$TEMP_CERT_FILE" ]] && rm -f "$TEMP_CERT_FILE"
    exit "${return_code}"
}

main
exit $?

